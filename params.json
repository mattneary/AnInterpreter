{"name":"AnInterpreter","tagline":"An APL interpreter","body":"An Interpreter\r\n==============\r\nAn Interpreter for *A Programming Language* (APL) currently with support for a few operators but without the list shorthand. Primarily, it features a well designed parser and easy interfacing for the addition of new operators, dyadic or monadic.\r\n\r\nExample\r\n-------\r\nThe following finds prime number up to 10.\r\n\r\n```apl\r\n(~R∊R×R)/R←1↓⍳10\r\n```\r\n\r\nApplications\r\n------------\r\nAn interpreter of APL is great for tools accepting complex mathematical input. APL has far more standard and robust notation than standard mathematics, of which users can take advantage.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}